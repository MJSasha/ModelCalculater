@using System.Text.Json;
@using UI.Components.Dialogs.InfoDialog;
@using UI.Components.Dialogs.SettingsDialog;
@using UI.Services;

@inject NavigationManager navigationManager

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">@LocalizationService.Localization.NavMenu_Title</a>
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<nav class="flex-column p-3">
		<button type="button" class="btn btn-outline-light w-100" @onclick="() => matrixActionsService.OnCalculatePressed?.Invoke()">@LocalizationService.Localization.NavMenu_Calculate</button>
		<button type="button" class="btn btn-outline-light w-100 mt-3" @onclick="() => matrixActionsService.OnRedactionPressed?.Invoke()">@LocalizationService.Localization.NavMenu_Redact</button>
		<button type="button" class="btn btn-outline-light w-100 mt-3" @onclick="() => matrixActionsService.OnClearPressed?.Invoke()">@LocalizationService.Localization.NavMenu_Clear</button>
		<button type="button" class="btn btn-outline-light w-100 mt-3" @onclick="ShowInfo">@LocalizationService.Localization.NavMenu_About</button>
		<button type="button" class="btn btn-outline-light w-100 mt-3" @onclick="ShowSettings">@LocalizationService.Localization.NavMenu_Settings</button>
	</nav>
</div>

@code {
	[Inject]
	public MatrixActionsService matrixActionsService { get; set; }

	[Inject]
	public DialogsService dialogsService { get; set; }

	[Inject]
	public AppSettings appSettings { get; set; }

	private bool collapseNavMenu = true;

	private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private async void ShowInfo()
	{
		await dialogsService.Show<InfoDialog, object, object>(null);
	}

	private async void ShowSettings()
	{
		try
		{
			var newSettings = await dialogsService.Show<SettingsDialog, SettingsDialogParams, AppSettings>(new SettingsDialogParams()
			{
				AppSettings = new AppSettings()
				{
					Language = appSettings.Language,
					PalySound = appSettings.PalySound
				}
			});

			var needRefresh = appSettings.Language != newSettings.Language;
			appSettings.Language = newSettings.Language;
			appSettings.PalySound = newSettings.PalySound;
			await SecureStorage.Default.SetAsync("app-settings", JsonSerializer.Serialize(appSettings));
			if (needRefresh) navigationManager.NavigateTo(navigationManager.Uri, true);
		}
		catch { /*ignore*/ }
	}
}
