@using UI.Components.Dialogs.Base;
@using UI.Data;
@using System.Linq;
@inherits BaseDialog<EnterTaskDialogParams, EnteredTaskResult>

@inject AppSettings appSettings

<BaseDialogLayout IsShown="IsShown">
    <BaseModal Title="@Parameters.Title" OnClose="() => this.Cancel()" DispalyCenter="true">
        <Content>
            <div class="d-flex flex-row">
                <div class="col">
                    <AutocompletedInput Label="@LocalizationService.Localization.TaskResultDisplay_EnterTaskGivenLabel" @bind-Source="Parameters.ColumnsNames" @bind-Result="result.GivenValues" />
                    <AutocompletedInput Label="@LocalizationService.Localization.TaskResultDisplay_EnterTaskToFindLabel" ResultBagesColorClass="btn-danger" class="mt-1" @bind-Source="Parameters.ColumnsNames" @bind-Result="result.ValuesToFind" />
                    @if (Parameters.ShowCriteriaSelector)
                    {
                        <AutocompletedInput ResultBagesColorClass="btn-info" Label="@LocalizationService.Localization.TaskResultDisplay_EnterTaskCriteriaLabel" class="mt-1" @bind-Source="Parameters.ColumnsNames" @bind-Result="result.Criteria" />
                    }
                </div>
                @if (Parameters.ShowTwoInputTasks)
                {
                    <div class="vl" />
                    <div class="col">
                        <AutocompletedInput Label="@LocalizationService.Localization.TaskResultDisplay_EnterTaskGivenLabel" @bind-Source="sourceForSecondTask" @bind-Result="secondTaskGiven" />
                        <AutocompletedInput Label="@LocalizationService.Localization.TaskResultDisplay_EnterTaskToFindLabel" ResultBagesColorClass="btn-danger" class="mt-1" @bind-Source="sourceForSecondTask" @bind-Result="secondTaskToFind" />
                        @if (Parameters.ShowCriteriaSelector)
                        {
                            <AutocompletedInput ResultBagesColorClass="btn-info" Label="@LocalizationService.Localization.TaskResultDisplay_EnterTaskCriteriaLabel" class="mt-1" @bind-Source="sourceForSecondTask" @bind-Result="secondTaskCriteria" />
                        }
                    </div>
                }
            </div>
        </Content>
        <Footer>
            <div class="mt-3">
                <ModalButton class="btn-outline-danger" OnClick="() => this.Cancel()">@LocalizationService.Localization.Common_Cancel</ModalButton>
                <ModalButton class="btn-outline-success" OnClick="() => this.Close()">@LocalizationService.Localization.Common_Ok</ModalButton>
            </div>
        </Footer>
    </BaseModal>
</BaseDialogLayout>

@code {
    private EnteredTaskResult result = new();

    private List<string> sourceForSecondTask = new();
    private List<string> secondTaskGiven = new();
    private List<string> secondTaskToFind = new();
    private List<string> secondTaskCriteria = new();

    protected override void OnShow()
    {
        sourceForSecondTask = new(Parameters.ColumnsNames);
    }

    private void Close()
    {
        if (Parameters.ShowTwoInputTasks)
        {
            result.GivenValues.AddRange(secondTaskGiven);
            result.ValuesToFind.AddRange(secondTaskToFind);
            result.Criteria.AddRange(secondTaskCriteria);

            result.GivenValues = result.GivenValues.Distinct().ToList();
            result.ValuesToFind = result.ValuesToFind.Distinct().ToList();
            result.Criteria = result.Criteria.Distinct().ToList();
        }

        base.Close(result);

        result = new();
        secondTaskGiven = new();
        secondTaskToFind = new();
        secondTaskCriteria = new();
    }

    public override void Cancel()
    {
        base.Cancel();

        result = new();
        secondTaskGiven = new();
        secondTaskToFind = new();
        secondTaskCriteria = new();
    }
}